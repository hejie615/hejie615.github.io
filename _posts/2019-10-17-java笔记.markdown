---
layout: post
title: Java随笔
date: 2019-10-17 09:00:00 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: java.jpg # Add image post (optional)
tags: [随笔] # add tag
---

### 1.相关概念

1. jdk：Java开发工具包，只要做Java开发就需要下载和安装该软件。
2. jre：Java运行时环境信息，只要运行Java程序就需要下载和安装该软件。
3. jvm：Java虚拟机，是Java程序与计算机操作系统之间的桥梁。（java程序要在操作系统上运行需要jvm解析）
4. javac.exe：Java的编译器，进行编译生成字节码文件
5. java.exe：Java的解释器，用于启动Java虚拟机对字节码文件进行解释执行
6. 环境变量path：可执行文件在任意路径都可以使用，把javac.exe所在路径复制到path最前面

### 2.变量

1. 变量使用前必须声明和初始化，
2. 变量不能重复声明

### 3.输入输出

1. 输出
	System.out.printIn();
2. 扫描键盘的输入

	Scanner sc = new Scanner(); //需要导入import java.util.Scanner;

	变量 = sc.next() //读取一个字符串

	变量 = sc.nextInt() //读取一个整数

### 4.数据类型

>注意：	
> + 加粗为推荐使用
> + 超出范围赋值会报错
> + 常量过大需加L或l(超过10位)
> + 整数常量默认为int类型，小数常量默认为double类型(若要表达为float可以在后面加f或F)
> + float小数点7位，double小数点15位
> + 默认为double的常量定义成float会报错，需要加f或F
> + 强转成小类型会截断 数据会丢失
> + int默认0 double默认0.0 string默认null boolean默认false

1. 基本数据类型(内存占用空间字节数)

	byte(1) short(2) **int(4)** long(8) float(4) **double(8)** boolean char(2)
2. 引用数据类型

	数组 类 接口 注解 枚举


---------

### 5.算数运算符
 
> + 两个整数相除得整数,丢弃小数部分（强转double或者乘以1.0推荐）
> + 整数运算0做除数不会报错 会出现算数异常，浮点运算0.0结果是无穷但不会报错


### 6.数组

1. 一维数组的声明
	* 数据类型[] 数组名称 = new 数据类型[数组的长度]（或者int arr[]）
	* 数据类型[] 数组名称 = new 数据类型[]{数据...}
	* 数据类型[] 数组名称 = {数据....}（是上面的简化版）

> + 数组元素不赋值也会有默认值
> + 数组只能在初始化的时候用大括号给值
> + 二维数组必须声明行，列可以省略（再重新声明每列）

2. 二维数组的声明

	数据类型[][] 数组名称 = new 数据类型[行数][列数]
	//同一维数组

## 面向对象

> this关键字
> + 在构造方法中this指向当前构造的对象
> + 在成员方法中谁调用该方法this就指向谁
> + 在成员方法中访问成员变量时默认会加上this.
> + this放在构造方法的第一行，可以调用本类的其他构造方法

### 一. 概念

1. 面向对象

	指以特征（属性）和行为的观点去分析现实世界中事务的方式
2. 面向对象编程

	指先使用面向对象的方式进行分析，再使用任意一门面向对象的编程语言进行翻译的过程

3. 三大特征

	封装、继承、多态

### 二. 定义

> + 局部变量： 主要值在方法体中声明的变量，作用范围从声明开始到方法体结束
> + 成员变量： 主要指在方法体外类体内声明的变量，作用范围从声明到类体结束

#### 1.类的定义

```
（1）类定义的语法格式
	class 类名{
		类体;
	}

（2）成员变量定义的语法格式
	class 类名{
		数据类型 成员变量名 = 初始值;	//分号不能省略
	}

（3）成员方法定义的语法格式
	class 类名{
		返回值类型 成员方法名(形参列表){
			成员方法体;
		}
	}

注意：
1. 类名每个单词首字母大写（规范）
2. 成员变量和成员方法从第二个单词起首字母大写（规范）
3. 成员方法的接收的实参必须和形参个数，类型，顺序保持一致 
```

#### 2.对象的创建

```
（1）语法格式
	new 类名();	//并没有引用赋值给一个变量，该对象叫做“匿名对象”

注意：
1. 使用new创建对象的过程叫 类的实例化
2. 创建对象就是在内存中堆区开辟一块存储空间，来存放该对象独有的特征信息
```

#### 3.引用

在java中使用引用数据类型声明的变量叫引用型变量，简称为引用。主要用于记录对象在堆区中的地址信息(指向对象的地址)

```
（1）语法格式
	类名 引用变量名;
如：
	Person p = new Person();	//表示声明Person类型引用变量p来记录Person类型对象的地址信息（引用变量在栈区开辟存储空间）
（2）使用
	引用变量名.成员变量名;
如：
	p.name = "zhangsan";
```

#### 4.构造方法

```
（1）语法格式
	class Person{
		Person(){
		}
	}

注意：
1. 构造方法的名称与类名完全相同，没有返回值类型，void也不能有。
2. 构造方法用来给成员变量初始化
3. 当类中没有定义任何形式的构造方法时，编译器会自动添加一个无参的空构造方法，叫做默认/缺省构造方法，如：Person(){}
4. 若在类中自定义构造方法，编译器将不提供空构造方法
```

#### 5.构造方法的重载（overload）

* 在java中若方法的名称相同但参数列表不同，这样的方法之间构成重载关系
* 方法重载的主要形式有：参数的个数不同、参数的类型不同、参数的顺序不同，与形参名和返回值类型无关，返回值类型最好相同。
* 实际意义：一个方法名就可以调用各种不同的版本实现不同的效果。如：pringIn()能输出各种格式

#### 6.封装

> + 封装就是一种保证成员变量值合理性的机制。
> + private修饰成员变量表示私有的含义，该成员变量只能在本类的内部使用。
> + public修饰成员方法表示公有的，该方法可以在任意位置调用（若方法前面啥也不加表示默认权限，访问级别低于public）

1. 使用private关键字私有化成员变量（private修饰成员变量表示私有的含义，该成员变量只能在本类的内部使用）
2. 提供公有的get和set方法，在方法体中进行判断，如果输入值合理则进行赋值
3. 在构造方法中调用set方法进行合理值的判断

#### static关键字

> static修饰的成员跟随类产生而产生，非静态成员变量只有在创建对象后才能使用
> 类似于js的prototype上的属性，是对象共有的一个相同点继承给所有创建的对象，避免空间浪费
> 一个对象修改static修饰的成员，其他对象的该成员也会发生改变
1. static修饰成员变量，表示静态，该成员变量由对象层级提升为类层级被所有对象共享(继承该变量)，该成员变量随类的加载准备就绪，与是否创建对象无关
2. static关键字也可以修饰成员方法，推荐使用 类名. 的方式访问
3. 静态成员只能访问静态成员不能访问非静态成员（相当于作用域问题，类层级肯定不能访问到对象层级）
4. 所有对象都有的一个共同点才用static修饰，节省空间否则没有意义 

#### 单例设计模式

> + 一个类只需要创建一个对象，不需要第二个，使用单例模式
> + 饿汉式：在本类里先创建对象，推荐
> + 懒汉式：先把引用指向null，有人需要对象的时候再创建对象

1. 先private私有化构造方法，阻止外部去创建对象
2. 声明本类类型的引用指向本类创建的对象，定义为private私有化并且加上static属性 否则将无法访问（成员变量只能创建对象后使用，所以用static修饰），只能通过static用类.访问
3. 对外提供一个get方法，把唯一的对象传出去，使用static关键字修饰（构造方法私有化只能通过static使用 类.的方式访问）

#### 继承

```
1. 概念
	* 当多个类之间有相同的特征和行为时，可以将相同的内容提取出来组成一个公共类，而在多个类的内部编写自己独有特征和行为
2. 使用方式
	* extends关键字
	public class Student extends Person{} 	//表示Student类继承自Person类
	
注意：
	1. 子类可以继承父类的成员变量和成员方法，其中私有成员变量可以继承但不可以直接使用(因为封装了)，子类不可以继承父类的构造方法和私有方法（构造方法因为继承下来也没有用）。
	2. 在构造子类对象时，会自动调用父类中的无参构造方法来初始化从父类继承下来的成员变量，相当于在子类构造方第一行隐式的写了super()代码（调用父类的构造方法，super父类），一般自己写super初始化继承下来的成员变量
	3. 一个子类只能有一个父类，一个父类可以有多个子类
```

#### 方法的重写(Override)

```
1. 概念
	* 在子类中重新写一个与父类中一样的方法来覆盖从父类中继承的版本
2. 原则
	* 在重写方法的上一行写上@Override， 备注上的意思
	* 要求方法名相同、参数列表相同、返回值类型相同，从jdk1.5开始允许返回子类类型（子类方法重写返回值可以返回子类的类型）
	* 要求方法的访问权限不能变小，可以相同或者变大。
	* 要求不能抛出更大的异常（异常机制）。
```

#### 常用的访问控制符

```
访问控制符		访问权限		本类		本类中的包		子类		其他包中的其他类
public			公有的		ok		ok				ok		ok
protected		保护的		ok		ok				ok		no
啥也不写			默认的		ok		ok				no		no
private			私有的		ok		no				no		no
```

#### 包的定义

```
1. package 包名;
2. package 包名1.包名2...包名n;		//便于管理，避免命名冲突问题
```

#### final关键字

```
1. 概念
	* final本意为"最终的，不可更改的"，该关键字可以修饰类、成员方法、成员变量等。
2. 使用方法
	①final修饰类：表示该类不能被继承。
		//防止滥用继承带来的危害
	②final修饰成员方法：表示该方法不能被重写但可以被继承。
		//防止不经意间造成的方法重写
	③final修饰成员变量：表示该成员变量必须初始化而且不能更改。（类似js的const）
		//为了防止不经意间造成数值的更改
```

#### 多态

```
1. 概念
	* 多态主要指同一种事务表现出来的多种形态。
	* 父类的引用指向一个子类的对象，形成多态
2. 语法格式

	父类类型 引用变量名 = new 子类类型();
如：
	Person pw = new Worker();
	pw.show();
解析：
	在编译阶段调用Person类中的show方法，在运行阶段调用Worker类中重写以后的show方法。（披着羊皮的狼）

多态的效果：
	①当父类的引用指向子类的对象时，父类的引用可以直接调用父类独有的方法；
	②当父类的引用指向子类的对象时，父类的引用不可以直接调用子类独有的方法；（只能使用父类中定义的属性和方法。编译时pw会被认为是Person类型所有会报错，通不过编译阶段）
	③对于父子类都有的非静态成员方法来说，编译阶段调用父类版本，运行阶段调用子类重写后的版本；（对于子类重写的方法，运行时使用子类重写的方法。在编译时父类也有该方法所有可以通过编译，但在运行时会被认为是子类类型，所以调用子类重写的方法）
	④对于父子类都有的静态方法来说，编译和运行阶段都调用父类版本，因为引用是父类类型的所以调用父类版本，因此与指向的对象无关；

注意：
	①编译时，pw被认为是Person类型；但在运行时是Worker类型；在内存中其实是子类对象。 *******
	②若要父类的引用想调用子类独有的方法，需通过强转为子类类型才能调用，就是让编译时pw也被认为是子类类型（如：(Worker)pw.getSalary();  ）

引用数据类型之间的转换
	①引用数据类型之间的转换分为： 自动类型转换  和  强制类型转换。
		自动类型转换主要指从小到大范围之间的转换，也就是子类到父类的转换。
		强制类型转换主要指从大到小范围之间的转换，也就是父类到子类的转换
	②引用数据类型之间的转换必须发生在父子类之间，否则编译报错。
	③若转换到的目标类型是子类类型但不是该引用真正指向的子类类型，则编译阶段通过，运行阶段因为在运行时pw被认为是Person类型不是父子类关系，所以在运行阶段会发生类型转换异常。（对象强转是一种还原行为，必须内存中是该类型的对象才能成功）
	④为了避免上述错误的发生，可以使用instanceof进行判断，具体格式如下：
		if(引用变量名 instanceof 数据类型)	//判断引用变量指向的对象是否为后面类型
	强转之前都应该instanceof一下

多态的意义：
	可以屏蔽不同子类的差异性实现通用的编程，但可以调用不同的方法带来不同的结果。
```

#### 抽象类

```
1. 抽象方法的概念
	* 抽象方法就是指不能具体实现的方法，也就是没有方法体并使用abstract关键字修饰。
	语法格式：
		访问控制符 abstract 返回值类型 方法名称(形参列表);
	如：
		public abstract void cry();
2. 抽象类的概念
	* 抽象类就是指不能具体实例化的类，也就是不能创建对象并使用abstract关键字修饰
3. 注意事项
	* 抽象类中可以有成员变量、构造方法以及成员方法；
	* 抽象类中可以有抽象方法也可以没有抽象方法；
	* 拥有抽象方法的类必须是抽象类，因此严格来说，具有抽象方法并且使用abstract关键字修饰的类才算是真正意义上的抽象类。
	* 抽象类主要是为了
4. 实际意义
	* 定义抽象类主要是为了里面的抽象方法不被别人调用，因为抽象类不能创建对象所以不能调用。
	* 抽象类的意义不在于自身创建对象而在于被继承，当一个类继承抽象类后必须重写抽象类中的抽象方法，否则该类也编程抽象类。
	* 也就是说抽象类对子类具有强制性和规范性，因此叫做模板设计模式。
```

#### 接口

```
1. 概念
	* 接口就是一种比抽象类还抽象的类，体现为所有成员方法都是抽象方法。（为了弥补类不能多继承而存在）
	* 定义类的关键字是class，而定义接口的关键字是interface。
	* 继承类的关键字是extends，而实现接口的关键字是implements。
2. 类和接口之间的关系
	* 类和类之间的关系		使用extends关键字表达继承的关系		支持单继承
	* 类和接口之间的关系		使用implements关键字表达实现的关系		支持多实现
	* 接口和接口之间的关系	使用extends关键字表达继承的关系		支持多继承
3. 抽象类和接口之间的区别
	* 定义抽象类的关键字是abstract class，而定义接口的关键字是interface。
	* 继承抽象类的关键字是extends，而实现接口的关键字是implements。
	* 继承抽象类支持单继承，而实现接口可以多实现。
	* 抽象类中可以有构造方法，而接口中不可以有构造方法。
	* 抽象类中可以有成员变量，而接口中只可以有常量。
	* 抽象类中可以有成员方法，而接口中只可以有抽象方法。
	* 抽象类中增加方法可以不影响子类，而接口中增加方法通常都影响子类。（因为接口增加方法子类也需要增加）
	* 从jdk1.8开始允许接口中出现非抽象方法，但需要使用default关键字修饰。
```

#### 匿名内部类

```
1. 语法格式
	* 接口/父类类型 引用变量名 = new 接口/父类类型(){ 方法的重写 };		//相当于一个匿名的子类
2. 经验分享
	* 当接口类型的引用作为方法的形参时，实参的传递方式有两种：
		* 自定义类实现接口，然后创建该类的对象作为实参传递；
		* 使用匿名内部类的语法格式来得到接口类型的引用作为实参传递； （只用得到一次的用匿名内部类）
```

#### Object类

```
1. boolean equals(Object obj)
	判断调用对象是否与参数对象相等	//与 == 运算符结果相同。
2. int hashCode()
	用于获取调用对象的哈希码值（内存地址的编号）
	若调用equals方法的结果相等，则各自调用hashCode方法的结果相同。
3. String toString()
	用于获取对象的字符串形式，该方法默认返回字符串：包名.类名@哈希码值的十六进制形式
	为了返回更有意义的数据内容则需要重写该方法
	当字符串内容与引用进行连接时，自动调用toString()方法
	当使用pring()或pringln()方法打印引用时，会自动调用toString()方法
```

#### 包装类和数学处理类

```
1. 包装类的概念
	* 由于Java语言是一门纯面向对象编程语言，而8种基本数据类型声明的变量并不是对象，为了满足Java语言的特性就需要对这些变量进行对象化处理，而实现该功能的相关类就叫做包装类。
2. 包装类的分类
	* int => java.lang.Integer类
	* char => java.lang.Character类
	* 其它类型对应的包装类就是将首字母变成大写
```

##### Interger类

```
1. 基本概念
	* java.lang.Integer类是int类型的包装类，里面包含了一个int类型的成员变量。该类由final关键字修饰表示不能被继承。
2. 常用方法
	* Interger(int value)		//根据参数指定的整数构造对象
	* Integer(String s)			//根据参数指定的字符串构造对象
	* 该类重写了equals()、hashCode()、toString()方法
	* int intValue() 			//用于获取调用对象中的整数数据并返回	（拆箱----从对象中拿出数据）
	* static Integer valueOf(int i)		//根据参数指定的整数返回对应的Integer对象	（装箱----把数据转换成对象）
	* static int parseInt(String s)		//用于将String类型转换为int类型并返回
3. 自动装箱和自动拆箱
	* jdk1.5开始的新特性，可以自动装箱拆箱，底层原理还是调用的intValue和valueOf
	* Integer it = 10;		//自动装箱
	* res = it;				//自动拆箱
```

##### BigDecimal类

```
1. 概念
	* 由于floaat类型和double类型的运算可能会有误差，为了实现精确运算则需要借助java.math.BigDecimal类型加以描述。
2. 常用方法
	* BigDecimal(String val)				//根据参数指定的字符串构造对象。
	* BigDecimal add(BigDecimal augend)		//用于计算调用对象和参数对象的和并返回
	* BigDecimal subtract(BigDecimal subtrahend)		//用于计算调用对象和参数对象的差并返回
	* BigDecimal multiply(BigDecimal multiplicand)		//用于计算调用对象和参数对象的积并返回
	* BigDecimal divide(BigDecimal divisor)				//用于计算调用对象和参数对象的商并返回 
3. 若商无法精确时的处理方法
	bd5.divide(bd6,BigDecimal.ROUND_HALF_UP);			//四舍五入标尺
```

#### String类

```
1. 概念
	java.lang.String类用于描述字符串，Java应用程序中所有字符串字面值都可以作为String类型的对象加以描述
	该类描述的字符串内容是个常量，一旦创建完毕后则不能更改，因此可以被共享。
如：
	String str1 = "abc"; 
	str1 = "123";
	//此时改变的是str1的指向而不是指向的内容
2. 常量池
	 由于String类型描述的字符串内容是个常量不可改变，因此Java虚拟机提供了一个常量池，当Java程序中出现字符串内容时就放入常量池中，若后续出现重复的字符串内容则直接使用池中已有的对象而不需再次创建，从而提高了性能
如：
	String str1 = "abc";
	String str2 = "abc";
	//此时str1和str2的指向地址是一样的
3. 构造String
	（1）String(char[] value, int offset, int count)
		使用value数组中下标从offset位置开始的count个字符来构造对象
	（2）String(char[] value)
		使用value数组中的所有内容构造对象
	（3）String(String str)
		根据参数指定的字符串内容来构造对象，心创建对象为参数对象的副本
注意：
	String str1 = new String("abc");	//会创建两个对象 "abc"会放到常量池里，new出来的会放到堆区中（会将字面量"abc"拷贝放到堆区中）
	String str1 = "abc";				//字面量写法
4. 常用方法
	（1）int length()
		返回字符串的长度
	（2）char charAt(int index)
		返回字符串指定位置的字符
	（3）boolean contains(CharSequence s)
		用于判断当前字符串是否包含参数指定的内容
	（4）String toLowerCase()
		返回字符串的小写形式
	（5）String toUpperCase()
		返回字符串的大写形式
	（6）String trim()
		返回去掉前导和后继空白的字符串
	（7）boolean startsWith(String prefix)
		判断字符串是否以参数字符串开头
	（8）boolean endsWith(String suffix)
		判断字符串是否以参数字符串结尾
	（9）equalslgnoreCase()
		忽略大小写判断与参数值是否相同
	（10）int indexOF(String str)
		在字符串中检索str，返回第一次出现的位置，如果找不到则返回-1
	（11）int indexOf(String str, int fromIndex)
		从指定位置开始检索
	（12）substring
		String substring(
			int beginIndex, intendIndex
			)
		// 返回字符串中从下标beginIndex(包括)开始到endIndex(不包括)结束的子字符串
	（13）Strubg substring(int beginIndex)
		返回字符串中从下标beginIndex(包括)开始到字符串结尾的子字符串
```

#### StringBuilder类和StringBuffer类

```
1. 概念
	* 由于String类型描述的字符串内容是个常量不可更改，当程序中出现大量类似的字符串时需要单独存放从而浪费内存空间，若希望使用一块内存空间进行存储并且可以修改字符串内容，则应该使用StringBuilder类和StringBuffer类。
	* 其中StringBuffer类从jdk1.0开始存在，该类支持线程安全，因此访问的效率比较低
	* 其中StringBuilder类从jdk1.5开始存在，该类不支持线程安全，访问的效率比较高（线程安全指排队列按顺序，所以效率低，不安全就是不排队所以效率高）
2. 常用方法
	* int capacity() 			//返回当前容量
	* int length() 				//返回长度
	* StringBuilder append(String str)			//追加字符串
	* StringBuilder insert(int offsest, String str)				//插入字符串
	* StringBuilder delete(int start, int end)					//删除字符串
	* StringBuilder replace(int start, int end, String str)		//替换字符串
	* int indexOf(String str)									//查找字符串
	* StringBuilder reverse() 										//字符串反转
	* 返回值存在的意义是可以连续使用：	str.append("abc").delete(5,10)
```

#### 日期相关的类

##### Date类

```
1. 概念
	* java.util.Date类用于描述特定的瞬间，可以精确到毫秒。
2. 常用的方法
	* Date() 	//获得当前的时间精确到毫秒
	* Date(long date)	//指定1970年1月1日00:00:00的毫秒数
	* long getTime() 	//返回自1970年到现在的毫秒数
	* setTime(long time)	//设置自1970年过去的毫秒数
```

##### SimpleDateFormat类

```
1. 概念
	* java.text.SimpleDateFormat类主要用于实现日期和文本之间的相关转换
2. 常用方法
	* SimpleDateFormat("yyyy-MM-dd HH:mm:ss")	//创建对象指定转换格式，y年，M月，d日，H小时（24小时制），mm分钟，ss秒。（yyyy表示4位，MM表示2位，- ：会原样输出）
	* String format(Date d1)	//Date类型转换为String类型
	* String parse(String str1)	//String类型转换为Date类型
```

##### Calender类

```
1. 概念
	java.util.Calendar类用于取代Date类来描述年月日时分秒的特定瞬间
2. 常用方法
	* Calendar Calendar.getInstance() 	//调用静态方法返回Calendar类型的引用（因为Calender是一个抽象类构造不了对象只能用这种方法，返回了一个Calender类型子类的对象形成了多态）
	* set(2008, 8, 8, 20, 8, 8)	//用set方法设置Calender引用的年月日时分秒（月份要减去1，因为月份是从0开始）
	* Date getTime() 	//将Calender类型转换为Date类型
```

#### 集合（容器）框架

```
1. 集合的由来
	* 当需要在程序中记录单个数据内容时，则声明一个变量即可；
	* 当需要在程序中记录多个类型相同的数据内容时，则声明一个一维数组即可；
	* 当需要在程序中记录多个类型不同的数据内容时，则构造一个对象即可；
	* 当需要在程序中记录多个类型相同的对象时，则声明一个对象数组即可；	//Student[] a = new Student[10] 	定义一个Student类型的数组
	* 当需要在程序中记录多个类型不同的对象时，则声明一个集合即可；
2. 集合框架结构
	* 在Java语言中集合框架的顶层是：jaca.util.Collection集合 和 java.util.Map集合
	* 其中Collection集合中操作元素的基本单位是：单个元素。
	* 集中Map集合中操作元素的基本单位是：单对元素。
```

##### Collection集合

```
1. 概念
	java.util.Collection集合是集合框架的根接口，其它接口是该接口的子接口。
2. 常用方法
	(1) boolean add()
		向集合中添加对象
	(2) boolean contains(Object o)
		判断是否包含指定对象
	(3) boolean remove(Object o)
		从集合中删除对象
	(4) void clear()
		清空集合
	(5) int size()
		返回包含对象的个数
	(6) boolean isEmpty()
		判断是否为空
```

##### List集合

```
1. 概念
	java.util.List集合是Collection集合的子集合，该集合中元素有先后次序且允许重复
	该集合的主要实现类有：ArrayList类、LinkedList类、Stack类、Vector类等
	其中ArrayList类的底层是采用动态数组进行数据管理，访问方便，增删不方便。
	其中LinkedList类的底层是采用链表进行数据管理，增删方便，访问不方便。
	其中Stack类主要用于描述具有后进先出特征的数据结构，叫做栈，该类的底层是采用数组进行数据的管理。
	其中Vector类的底层采用数组进行数据的管理，与ArrayList类相比属于线程安全的类，因此效率比较低，在以后的开发中推荐使用ArrayList类取代之。
2. 常用方法
	(1) void add(int index, E element)
		向集合中指定位置添加元素
	(2) boolean addAll(int index, Collection<?extends E>c)
		向集合中添加所有元素
	(3) E get(int index)
		从集合中获取指定位置元素
	(4) E set(int index, E element)
		修改指定位置的元素（返回修改的元素）
	(5) E remove(int index)
		删除指定位置的元素（返回删除的元素）
	(6) list subList(int index, int index)
		获取集合中一部分内容，获取的内容和原集合占用共同的存储空间，获取集合的改变会影响原集合 
```

##### 泛型机制

```
1. 概念
	通常情况下集合中可以存放不同类型的对象，本质上是将这些对象全部看做Object类型放入，因此从集合中取出元素时也是Object类型，为了表达元素最真实的数据类型就需要强制类型转换，而强制类型转换可能发生类型转换异常。
	为了避免上述错误的发生，从jdl1.5开始提出泛型机制，也就是在集合名称的右侧使用<数据类型>的方式明确要求该集合可以存放的元素类型，若放入其他类型则编译报错
如：
	List lt1 = new LinkedList();					//可以放入任意类型对象，取出麻烦
	List<String> lt1 = new LinkedList<String>();	//只能放入String类型，取出方便
2.原理
	泛型的本质就是参数化类型，也就是让数据类型作为参数传递，集合定义中的E相当于形式参数负责占位，而使用集合时<>中的数据类型相当于实际参数负责给形式参数初始化，当初始化完毕后所有E被替换为实际参数表示的类型进行使用。
	由于E支持的数据类型非常广泛，因此得名为"泛型"。
如：
	其中i叫做形式参数，负责占位				其中E叫做形式参数，负责占位
	int i = 5;						E = String;
	int i = 10;						E = Student;
	public void show(int i) {				public interface List<E> {
		... 							...
	}							}

	其中5叫做实际参数，用于给形式参数初始化			其中String叫做实际参数
	show(5);						List<String> lt1 = ...;
	show(10);						List<Student> lt2 = ...;
```

##### Queue集合

```
1. 概念
	java.util.Queue集合是Collection集合的子集合，与List集合是平级关系。
	该集合的主要实现类是：LinkedList类，因为该类在增删方面有一定的优势。
	该集合用于描述具有先进先出特征的数据结构，叫做队列
2. 常用方法
	(1) boolean offer(E e)
		将一个对象添加至队尾，若添加成功则返回true
	(2) E poll()
		从队首删除并返回一个元素
	(3) E peek()
		返回队首的元素（但】】）
```

##### Set集合

```
1. 概念
	java.util.Set集合是Collection集合的子集合，与List集合以及Queue集合平级关系。
	该集合与List集合的主要区别在于：元素没有先后次序并且不允许重复的元素。
	该集合的主要实现类有：HashSet类 和 TreeSet类。
	其中HashSet类的底层采用哈希表进行数据管理的。
	其中TreeSet类的底层采用二叉树进行数据管理的
2.  常用方法
	(1) booleanhas Next()
		判断集合中是否有可以迭代、\访问的元素
	(2) E next()
		用于取出一个元素并指向下一个元素
	(3) void remove()
		用于删除访问到的最后一个元素
注意：
	当使用迭代器迭代集合中的所有元素时，若使用集合中的remove方法来删除元素，则会出现ConcurrentModificationException并发修改异常，以后的开发中应该使用迭代器的remove方法来删除元素。

增强版的for循环（for each结构）
(1) 语法格式
	for(元素类型 变量名 : 数组名/集合名){
		循环体;
	}
(2)执行流程
	不断地从数组或集合中取出一个元素并赋值给变量并执行循环体，知道处理完毕所有元素为止。
```

##### Map集合

```
1. 基本概念
	java.util.Map<K,V>集合中操作元素的基本单位是单对元素，其中类型参数如下：
		K - 此映射所维护的键（key）的类型
		V - 映射值（value）的类型
	该集合中不允许出现重复的键，每个键最多只能映射到一个值。
	该集合的主要实现类有：HashMap类 和 TreeMap类。
	其中HashMap类的底层是采用哈希表进行数据管理的。
	其中TreeMao类的底层是采用二叉树进行数据管理的。
2. 常用方法
	(1) V put(K key, V value);
		将key-value存入Map，若集合中已经包含该key，则替换对应的value，返回值为该key原来所对应的value，若没有则返回null
	(2) V get(Object key);
		返回与参数key所对应的value对象，如果不存在则返回null
	(3) boolean containsKey(Object key);
		判断集合中是否包含指定的Key
	(4) boolean containsValue(Object value);
		判断集合中是否包含指定的Value
	(5) remove(key)
		移除key相应的映射返回value，若没有则返回null
```

#### 异常机制

```
1. 基本概念
	异常就是"不正常"的含义，在Java语言中用于表示运行阶段发生的错误。
	java.lang.Throwable类是Java语言中所有错误（Error）和异常（Exception）的超类。
	其中Error类主要用于描述比较严重无法编码解决的问题，如：JVM挂了。
	其中Exception类主要用于描述比较轻微可以编码解决的问题，如：0作为除数。
2. 基本分类
	java.lang.Exception类是所有异常类的超类，主要分为以下两大类：
		RuntimeException - 运行时异常，也叫作非检测性异常
		IOException和其他异常 - 其他异常，也叫作检测性异常
								//检测性异常就是在编译阶段能够被编译器检测出来的异常
	其中RuntimeException类的主要子类：
		ArithmeticException - 算数异常
		ArrayIndexOutOfBoundsException - 数组下标越界异常
		NullPointerException - 空指针异常
		ClassCastException - 类型转换异常
		NumberFormatException - 数字格式异常

注意：
	当程序执行过程中发生异常但没有手动处理时，由Java虚拟机采用默认方式处理，而默认处理方式就是：打印异常名称、异常原因、异常发生的位置等并终止程序。

3. 异常的避免
	在以后的开发中尽量使用if条件判断来避免异常的发生。
4. 异常的捕获
	(1) 语法格式
		try{
			编写可能发生异常的语句;
		}
		catch(异常类型 变量名){
			编写针对该类异常的处理语句；
		}	//catch可以写多条也可以捕获Exception（所有异常的根）
		...
		finally {
			编写无论是否发生异常都应该执行的语句;
		}
	(2)注意事项
		a. 当需要编写多个catch分支时，切记小类型的异常应该放再大类型的异常上面
		b. finally主要用于编写善后处理的语句，如：关闭已经打开的文件等。finally一定会被执行
5. 异常的抛出
	(1) 基本概念
		在某些特殊情况下产生的异常无法处理或者不便于处理时，就可以将该异常转移给该方法的调用者，这种方式就叫做异常的抛出。
	(2) 语法格式
		访问权限 返回值类型 方法名称(形参列表) throws 异常类型1, 异常类型2 ... {}
	如：
		public void show() throws IOException {}
	(3) 重写方法的抛出原则
		* 不可以抛出同级不一样的异常
		* 不可以抛出更大的异常
6. 自定义异常
	(1) 基本概念
		虽然Java官方提供了大量的异常类，但一定不会包含所有开发中可能出现的异常，在Java程序中若需要表达特定问题的特定异常时，就需要程序员自定义异常来描述。
	(2) 实现流程
		a. 自定义xxxxException继承自Exception类或者其子类；
		b. 提供两个版本的构造方法：无参构造方法 和 字符串作为参数的构造方法；

注意：
	(1) 在以后的开发中尽量使用if条件判断避免异常的发生
	(2) 若是在避免不了，则进行异常的捕获
	(3) 若是在捕获不了，则进行异常的抛出
	(4) 若希望使用针对性的异常，则需要自定义异常      	    	 	
```

#### File类

```
1. 基本概念
	java.io.File类主要用于描述文件和目录的路径信息，可以获取名称、大小等属性信息
2. 常用的方法
	(1) boolean delete()
		用于删除文件，当删除目录时要求是空目录
	(2) boolean createNewFile()
		用于创建新的空文件
	(3) boolean mkdir()
		用于创建目录
	(4) boolean mkdirs()
		用于创建多级目录
	(5) File[] listFiles()
		用于获取一个目录中的所有内容
	(6) boolean isFile()
		用于判断该对象是否为标准文件
	(7) boolean isDirectory()
		用于判断该对象是否为目录文件
```

#### IO流

```
1. 基本概念
	I/O就是Input/Output的简写，也就是输入输出的含义。
	I/O流就是像流水一样不间断地进行输入输出的状态。
2. 基本分类
	按照数据读写的基本单位不同分为 字节流 和 字符流
	其中字节流主要指以字节为单位进行写的流，可以处任意类型的文件
	其中字符流主要指以字符(2个字节)为单位进行读写的流，只能处理文本文件。

	按照数据流动的方向不同分为：输入流 和输出流（站在程序的角度）。
	其中输入流主要指从文件中读取数据内容输入到程序中，也就是读文件；
	其中输出流主要指将程序中的数据内容输出到文件中，也就是写文件；

```

##### FileOutputStream类

```
1. 基本概念
	java.io.FileOutputStream类主要用于将图像数据之类的原始字节流写入输出流中。
2. 常用的方法
	(1) void write(int b)
		将指定字节写入此文件输出流
	(2) void write(byte[] b, int off, int len)
		将指定字节数组中从偏移量off开始的len个字节写入此文件输出流。
	(3) void write(byte[] b)
		将b.length个字节从指定字节数组写入此文件输出流中
	(4) void close()
		用于关闭文件输出流并释放有关的资源
```

##### FileInputStream类

```
1. 基本概念
	java.io.FileInputStream类主要用于从输入流中读取图像数据之类的原始字节流。

```

##### BufferedWriter类

```
1. 基本概念
	java.io.BufferedWriter类主要用于向输出流中写入单个字符、字符数组以及字符串
2. 常用的方法
```

##### BufferedReader类

```
1. 基本概念
	java.io.BuffedReader类主要用于从输入流中读取单个字符、字符数组以及一行字符串内容。
```

##### PrintStream类

```
1. 基本概念
	java.io.PrintStream类主要用于方便地打印各种数据内容并且自动刷新
```

##### ObjectOutputStream类

```
1. 基本概念
	java.io.ObjectOutputStream类主要用于将java语言中的对象整体写入输出流中
	只能将支持 java.io.Serializable 接口的对象写入流中。
	类通过实现 java.io.Serializable 接口以启用其序列化功能。
	所谓序列化就是指将一个对象相关的所有信息有效组织成字节序列的转化过程。
```

##### ObjectInputStream类

```
1. 基本概念
	java.io.ObjectInputStream类主要用于从输入流中一次性将一个对象的内容读取出来，实现了从字节序列到对象的转化过程，叫做反序列化
2. 常用方法
经验：
	当需要写入多个对象到文件中时，建议先将多个对象放入一个集合对象中，然后将集合对象看做一个整体只需要调用一次writeObject方法就可以写入所有内容，此时只需要调用一次readObject方法就可以将所有内容读取出来，这样就避免了通过返回值来判断是否读取到文件的末尾
```

##### transient关键字

* transient是java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的

#### 线程

```
1. 概念
	程序 ： 数据结构 + 算法，主要指存放在硬盘上的可执行文件
	进程 ： 主要指运行在内存中的程序

	目前主流的操作系统都支持多进程，为了使得操作系统能够同时执行多个任务，但进程是重量级的，新建进程对系统的资源消耗比较大，因此进程的数量比较局限。
	线程是进程内部的程序流，也就是操作系统中支持多进程，而每个进程内部又可以支持多线程，线程是轻量级的，新建线程会共享所在进程的系统资源，因此以后的开发中都采用多线程技术
	多线程技术采用时间片轮转法实现并发执行，所谓并发就是指宏伟并行微观串行。
2. 线程的创建
	(1) 创建和启动的方式
	java.lang.Thread类用于描述线程，Java虚拟机允许应用程序并发地运行多个执行线程，而线程的创建和启动方式如下：
		* 自定义类继承Thread类并重写run方法，创建该类的实例调用start方法。
		* 自定义类实现Runnable接口并重写run方法，创建该类的实例作为实参来构造Thread类型的对象，然后使用Thread类型的对象调用start方法
	(2) 相关方法的解析
			Thread() - 使用无参方式构造对象
			Thread(String name) - 根据参数指定的接口引用来构造对象
			Thread(Runnable target) - 根据参数指定的接口引用来构造对象。
			Thread(Runnable target, String name) - 根据参数指定的引用和名称构造对象。

			void run() - 若使用Runnable类型的引用构造出来的对象调用该方法，则最终调用引用所指向对象的run方法，否则调用该方法啥也不做。
			void start() - 用于启动线程，Java虚拟机会自动调用该线程的run方法。
	(3) 原理分析
		a. 执行main方法的线程叫做主线程，执行run方法的线程叫做子线程。
		b. main方法是程序的入口，最开始只有主线程来一次执行main方法中的代码，当start方法调用成功后，线程的个数瞬间由1个变成了2个，其中子线程去执行run方法，主线程继续执行main方法的代码，两个线程各自独立运行互不影响。
		c. 当run方法执行完毕后子线程结束，当main方法执行完毕后主线程结束，但两个线程谁先执行没有明确的规定，取决于操作系统的调度算法。

	注意：
		线程创建和启动的方式一相对来说代码简单，但Java语言中只支持单继承，若该类继承Thread类后则无法继承其他类；而方式二相对来说代码复杂，但不影响该类继承其他类以及实现其它接口，因此以后开发中推荐方式二。
```

##### 线程的同步机制

```
1. 基本概念
	当多个线程同时访问同一种共享资源时，可能会造成数据的覆盖等不一致性问题，此时就需要进行线程之间的通信和协调，该机制就叫线程的同步机制。

2. 实现方式
	在Java语言中使用synchronized关键字类实现同步/对象锁机制，来保证线程执行该段代码时的原子性（要么不执行，要么就执行完整），具体方式如下：
	(1) 使用同步语句块的方式来锁定部分代码
		synchronized(任意类型的引用){
			编写需要锁定的代码
		}
	(2) 使用同步方法的方式来锁定所有代码
3. 原理分析
	当多个线程调用start方法后同时去抢占共享资源，由于同步锁的存在导致只有一个线程能够抢到共享资源并进行枷锁处理，其它没有抢到共享资源的线程进入阻塞状态，当该线程执行完毕所有锁定的代码后自动释放同步锁，此时阻塞状态的所有线程继续抢占共享资源，抢不到的线程再次回到阻塞状态。
```

#### 基于tcp协议的编程模型

```
1. 编程模型
服务器：
	(1) 创建ServerSocket类型的对象并提供端口号；
	(2) 等待哭护短的连接请求，调用accept方法；
	(3) 使用输入输出流进行通信；
	(4) 关闭Socket；
客户端：
	(1) 创建Socket类型的对象并提供服务器的IP地址和端口号；
	(2) 使用输入输出流进行通信；
	(3) 关闭Socket；
```

#### 常用的设计原则

```
1. 软件开发的流程
	需求分析文档 > 概要设计文档 > 详细设计文档 > 编码和测试 > 安装和调试 > 维护和升级
2. 常用的设计原则
	(1) 开闭原则：对扩展开放，对修改关闭，提高了代码的扩展性和维护性
如：
	public class Person {
		private String name;
		private int age;
		...
	}
	public class SubPerson extends Person {
		private boolean gender;
		...
	}

	(2) 里氏代换原则：任何父类可以出现的笛梵，子类一定可以出现，在以后的开发中多使用继承和多态的理念。
如：
	public static void draw(Shape s) {
		s.show();
	}
	ShapeTest.draw(new Rect(1,2,3,4));
	ShapeTest.draw(new Circle(5,6,7));

	(3) 依赖倒转原则：尽量多依赖于抽象类和接口，而不是具体实现类。在以后的开发中多使用抽象类和接口，对子类具有强制性和规范性
如：
	public abstract class Account {
		public abstract double getLixi();
	}
	public class FixedAccount extends Account {
		@Override
		public double getLixi(){}
	}

	(4) 接口隔离原则：尽量依赖于小接口而不是大接口，避免接口的污染。可以降低耦合度，耦合主要指一个模块与其他模块的关联度。
如：
	public interface RunAnimal {
		public abstract void ran();	// 描述奔跑的行为
	}
	public interface FlyAnimal {
		public abstract void fly();	// 描述飞行的行为
	}
	public class Dog implements RunAnimal {
		public void run(){} 	// 直接继承某一个详细的接口而不是继承大接口
	}

	(5) 迪米特法则
		* 一个实体应当尽量少与其他实体之间发生相互作用
		* 低耦合，高内聚
		* 高内聚就是指将一个实体应当将该实体应该拥有的功能尽量聚集在该实体内部

	(6) 合成复用原则：尽量多使用合成的方式，而不是继承的方式
如：
	public class A {
		public void show() {}
	}

	public class B {
		private A a;	//推荐用这个，不推荐用继承
		public void test() {
			//想调用A的shou方法
			a.show;
		}
	}
```

#### 常用的设计模式

```
1. 工厂模式
	需要一个父类接口，实现接口的不同类都重写接口的共同方法，再通过一个工厂类来实例化类并返回，返回后用父类接口引用接收实现多态可以调用子类的方法
	* 普通工厂模式
		(1) 通过传入需要创建对象的名字返回一个对象，没有则返回null，需要一个工厂类来创建对象返回
		(2) 缺点：如果传入的名字不匹配会引发空指针异常
	* 多个工厂模式
		(1) 通过调用方法返回一个对象，工厂类需要为每一个类创建一个方法
	* 静态工厂模式
		(1) 把多个工厂模式的方法都设置为静态方法使可以通过类名调用，不用再创建对象引用调用，更方便
	* 抽象工厂模式
		(1) 把多个需要创建的类，都创建一个独立的类返回给一个生产公共接口(这个类实现生产公共接口)，再通过生产公共接口引用的方法实例化类（返回值为方法公共接口类型，因为有多个不同类所以返回值为他们的父类接口类型），返回给方法公共接口引用（多加一层接口多态），就可以调用不同类的不同方法了
```



类名首字母大写，方法名第二个字母起首字母大写

获取别的类里面的成员变量或者方法
	先定义一个私有的别的类的类型引用
	在创建一个构造方法来使别的类创建对象放入进来获取别的类的对象然后就可以获取到变量和方法
	如果是私有变量，可以创建一个公开的get方法return出来


ObjectOutputStream和ObjectInputStream顺序要对应 否则会出现死锁，导致双方都在等待数据，（input需要先接收一定的header数据，就收到这些数据之前会处于阻塞状态）

socket只用共同的一个	




#### JDBC

##### JDBC访问数据库的步骤

```
1. 加载驱动
	Class.forName("包名.驱动名")
2. 获取连接	Connection
	DriverManager.getConnection(url,username,password)
3. 定义sql 并获取sql的执行环境 Statement(PrepareadStatement)
	conn.createStatement() 这里以后会使用prepareadStatement
4. 执行sql 处理sql 返回值
	select 返回ResultSet 遍历	st.executeQuery
	dml		返回int	代表影响的数据行数	st.executeUpdate
5. 释放资源
	Connection	Statement	ResultSet
```

##### 使用PreparedStatement 替换 Statement

```
1. 可以防止拼接的sql注入 原理就是你输入的数据不拼接 直接作为真实数据
2. 由于采用预编译 会提前生成sql的执行计划 提高执行效率
3. 拼接sql 每次sql是不同的 这会给数据库服务器的sql缓冲造成冲击 无法实现批处理
4. 由于不拼接sql 程序员出错的概率会降低 提高编码质量和速度

使用后 用.setString(序号，变量名)来赋值，序号从1开始
```

#### 请求的 转发

```
1. 一个web组件 将未处理完毕的请求，通过tomcat转交给另一个web组件处理
2. 步骤
	(1) 获取请求转发器
		RequestDispatcher rd = request.getRequestDispatcher("转发的地址");
	(2) 通过转发器 发起转发
		rd.forward(request, response);
	简写步骤
		request.getRequestDispatcher("转发的地址").forward(request, response);
3. 转发流程
	(1) 当浏览器访问服务器中tomcat时
	(2) tomcat将请求信息，与响应工具进行封装，传递给我们的Servlet的service方法进行处理
	(3) 我们在service方法中，得到请求转发器，通过请求转发器 告知 tomcat ，请求转发的地址
	(4) tomcat接收到请求转发需求，会重新封装请求信息，将请求对象 与 响应对象 传递给 转发地址的Servlet的service方法进行处理
4. 特点
	(1) 转发过程中，多个Servlet之间共享一份请求信息，共享一个响应对象
	(2) 转发只能发生在同一个服务器中（转发无法实现跨域）
	(3) 无论转发发生多少次，对于浏览器来说！只发起过一次请求，并且只接到了一次响应
	(4) 相对于重定向来说，效率更高
```

#### 请求的 重定向

```
1. 概念
	响应时，告知浏览器新的请求地址，浏览器接收到 自动请求新的地址
2. 步骤
	response.sendRedirect("重定向地址");
3. 重定向流程
	(1) 当浏览器访问服务时，服务器对浏览器响应一个302的状态码，以及一个location的地址
	(2) HTTP协议约定，当浏览器接收到302状态码时，会自动寻找location地址，并发起新的请求（相当于 控制用户浏览器 自动完成页面的跳转操作）
4. 特点
	(1) 重定向会产生新的请求 和 新的响应
	(2) 使用重定向，可以在多个服务器之间发生（可以实现跨域操作）
	(3) 浏览器地址栏的内容 会发生改变
	(4) 相对于请求转发而言，效率较低
```

##### 在一次用户的操作中，可以无限制的进行转发和重定向，但是记住：一定要存在出口

#### HTTP协议的组成部分

```
1. 请求
	请求由四部分组成：
		- 请求头
			请求头部的信息，由一个个的键值对组成，描述的是有关客户端的信息
		- 请求体
			GET请求没有请求体。当请求方式为POST时，存在请求体，请求体是用于存储数据的数据容器
		- 请求空行
			请求头部与请求体之间的一行空白
		- 请求行
			由一个个的键值对组成，描述的是：请求方式，远端服务器地址，以及所使用的协议版本等信息
2. 响应
	响应由三部分组成：
		- 响应头
			响应头部的信息，由一个个的键值对组成，描述的是有关服务器的信息
		- 响应体
			服务器给客户端回复的主题内容
		- 响应行
			描述了响应的协议版本，响应状态码，以及响应成功或失败的相关解释
```

#### Cookie技术

```
技术实现步骤以及原理：
1. 当服务器向客户端响应时，可以向响应头部加入Cookie，每一个Cookie表示一个键值对。
2. 浏览器在接收到响应后，如果存在Cookie，则会将Cookie存储在文本文件中(.txt)
	//存储时，会存储的信息有：服务器的域，路径，Cookie键，Cookie的值，存储时长...
3. 当浏览器向客户端请求时，会遍历Cookie的文本文件，将匹配新请求地址的Cookie携带上，放在请求头部，发送给服务器
	//Cookie匹配的规则：当Cookie存储的域相同时，路径匹配时 才会将Cookie发送给服务器。
```

##### 如何创建Cookie

```
Cookie在Java中的体现 就是一个表示键值对的 Java类，类名为：Cookie
格式：
	Cookie cookie = new Cookie(String name, String value);
```

##### 如何将Cookie添加到响应头部

```
通过响应对象，将Cookie添加到响应头部
格式：
	response.addCookie(Cookie cookie);
一次响应，可以添加n个Cookie
如果浏览器中已经存储过与某个Cookie的name相同的Cookie，再次存储时会覆盖value
```

##### 如何从请求头部 得到之前存储的所有Cookie

```
因为一个域 和 路径下，可能存在多个Cookie，所以获取的不是单个Cookie，而是一个数组：
Cookie[] cookies = request.getCookies();
// 如果从未存储过，则返回的数组值是 null
```

##### 得到Cookie后，如何取出其中的键和值

```
获取Cookie的键：
	String name = cookie.getName();
获取Cookie的值：
	String value = cookie.getValue()；
```

##### 如何调整Cookie存储时长

```
cookie.setMaxAge(int 秒);
传入的值：
	- 负数： 默认-1，表示浏览会话结束时 删除
	- 正数： 存活的描述，例如 60*60*24*365*10 表示10年
	- 0： 经常用于覆盖一个cookie时使用，作用为0秒后删除（立即删除）
```

##### Cookie存储时，路径问题的解决

```
Cookie的保存路径是当前提交页的路径
路径匹配的规则：
	Cookie的替换：	只能由相同域，相同路径的 替换
	Cookie的获取：
	只能由相同域，相同路径或子路径 获取
例如：
	A地址：		localhost/x/a.do
	B地址：		localhost/x/b.do
	C地址：		localhost/c.do

	A存储数据时：a/b可以获取，a/b可以替换	c不能获取 也不能替换
	C存储数据时：a/b/c可以获取，c可以替换

JavaWeb 给我们提供了一个Cookie的方法，用于设置Cookie的路径
通常我们会将Cookie的路径设置为/（根路径）
格式：	Cookie.setPath("/");
```

##### Cookie的优缺点

```
缺点：
	1. Cookie存储的数据类型有限制，只能是字符串
	2. 数据存储的大小，有限制，最大为4kb
	3. 数据存储在用户的计算机上，不安全
	4. 受限于用户的浏览器设置，当浏览器禁止使用Cookie时，cookie就无法再存储了
优点：
	数据存储在客户端，分散了服务器的压力
```

#### Session技术（会话，和cookie差不多）

```
基于Cookie实现的技术，是Java中的一个键值对的容器，就像我们常用的Map集合
技术原理：
	1. 浏览器访问服务器时，服务器可以选择创建Session对象
	2. session对象在创建时，会生成一个id，我们称其为sessionid，session是Session的密匙，是唯一的！
	3. session创建完毕后，会自动将session以cookie的形式 存储到用户的浏览器中
	4. 当浏览器再次访问服务器时，会自动携带sessionid发送给服务器
	5. 服务器得到sessionid后，会去自动匹配找到对应的session对象，供用户使用
```

##### 如何获取session对象

```
在Java中，session是一个Java对象，对象的类型为：HttpSession
获取Session对象的格式：
	格式1 无参方法：
		HttpSession session = request.getSession();
		内部调用了 一参方法，且传入true

	格式2 一参方法：
		HttpSession session = request.getSession(boolean isNew);
		用于获取session 参数：
		true：	根据当前浏览器传入sessionid，寻找session对象并返回。如果不存在，则创建新的session并返回
		false：	根据当前浏览器传入的sessionid，寻找session对象并返回。如果不存在，则返回null
```

##### session的常用方法

```
1.存储数据
	session.setAttribute(String key, Object value);
2. 获取数据
	Object value = session.getAttribute(String key);
3. 删除数据
	session.removeAttribute(String key);
4. 销毁session（应用场景： 百分之99的情况是：退出登录）
	session.invalidate();
```

##### session的存活时长

```
session的默认时长为：30分钟！
指的是：用户的上一次访问大于30分钟后，session自动删除

设置Session时长：
	方式1. 修改单个session的时长：
		session.setMaxInactiveInterval(int 秒);
	方式2. 修改tocmat下，所有session的默认时长：
		独立环境：	寻找到tomcat/conf/web.xml文件
		开发环境：	寻找到Servers项目中的web.xml

		修改web.xml中 session-config节点
			<session-config>
				<session-timeout>数值分钟</session-timeout>
			</session-config>
```

##### session的优缺点

```
优点：
	1. 数据存储在服务器中，安全
	2. session存储时的值类型为：Object，可以存储任意类型数据
	3. 可存储的数据大小，理论上是无上限的
缺点：
	数据在服务器的内存中存储，内存通常是有限的，会对服务器造成大量的压力，很容易耗尽服务器资源
```

##### Cookie技术 和 Session技术 不是互斥的

```
Cookie和session是结合使用的
	通常：
		对于安全不敏感的数据，建议使用Cookie存储
		对于安全敏感的数据，建议使用session存储

		对于安全敏感，且较大的数据，存储在数据库
```

#### JSP简介

* Java Server Pages 是Java的动态网页技术

#### JSP引擎

```
引擎原理：
	JSP引擎用于将JSP文件，转换为Servlet
	就是将写的JSP文件（html等）通过编写的引擎转换为servlet格式输出html的形式

	1. 在服务器启动时，JSP引擎读取.jsp文件
	2. 将文件转换为Servlet的代码，并给Serblet添加映射地址为 jsp的文件名称
	3. 当用户浏览器访问jsp文件名称时，其实请求的不是jsp文件，而是生成的servlet
	4. Servlet负责给浏览器进行响应

例如：
	demo4.jsp文件：
		<body>
			<h3>我们的第一个JSP文件</h3>
			<%
				for(int i=0;i<100;i++){
					%>
					<div>从前有座山</div>
					<%
				}
			%>
		</body>

	demo4_jsp.java
		PrintWriter out = response.getWriter();
		out.println("<body>");
		out.println("<h3>我们的第一个JSP文件</h3>");
				for(int i=0;i<100;i++){
		out.println("<div>从前有座山</div>");
				}
		out.println("<body>");
```

#### JSP语法结构

```
JSP文件保存的路径：	webContent目录下
JSP文件 可以包含HTML代码，Java代码，以及JSP特有的标记
```

##### Java代码 声明区

```
指的是Java的成员代码位置，在JSP声明区中编写的Java代码，会生成到servlet的成员位置

语法：
	<%!
		这里用于编写Java代码，且会生成到声明区
	%>
```

##### Java代码 执行区

```
指的是Servlet的service方法中。用户每次请求 都会执行

语法：
	<%
		Java代码
	%>
```

##### 表达式

```
用于快速的将Java代码中的变量输出到网页中

语法：
	<%=变量名%>

转换的Java：
	out.print(变量名);
```

##### JSP中如何编写注释

```
因为JSP文件包含了三种语法结构（java/html/jsp）
所以，三种语法结构的注释 都可以起到注释的效果：

html注释：
	<!-- html的注释 -->
	在JSP中，HTML的注释会被JSP引擎认为是HTML代码，会转换为out.write("<!-- -->");
Java注释：
	单行：	//
	多行：	/* */
	文档：	/** */
	在JSP中，Java的注释 会被JSP引擎认为是Java代码，会原封不动的放到_jsp.java文件中
JSP注释：
	<%-- JSP注释 --%>
	在JSP引擎将jsp文件转换为.java文件时，会忽略JSP注释的部分
```

#### JSP 三大指令

```
指令的格式：
	<%@ 指令名称 属性名=值 属性名2=值 ... 属性n=值 %>
```

##### page指令

```
用于设置页面

完整格式：
<%@ page
	language="java"
	extends="继承的类"
	buffer="数值|none"	// 缓冲大小，none表示不缓冲，默认是8kb
	session="true|false"	// true：自动创建session	 false：表示不自动创建
	autoFlush="true|false"	// true：缓冲器自动清除，默认true
	isThreadSafe="true|false"	// <%%>中的代码 是否是同步的，true表示同步，默认false
	contentType="text/html;charset=utf-8"	//内容类型以及编码格式
	errorPage="网页地址"		// 当JSP代码出错误，页面由指定地址进行显示
	isErrorPage="true|false" 	// true：当前页面是处理错误的页面
	import="导包列表"	//属性值是一个或多个导入的包，包与包之间使用逗号间隔即可
%>
```

##### 指定项目全局错误页面

```
编写项目的web.xml

在根节点中，加入子节点：
	<error-page>
		<error-code>404</error-code>
		<location>处理404的页面地址</location>
	</error-page>
```

#### include 指令

```
用于将一个JSP 或 HTML文件 引入到另一个JSP中

一开始直接把另一个JSP文件嵌入到JSP文件中然后统一编译为java文件（只有自己的文件不会多生成）

格式：
	<%@ include file="引入的路径" %>
```

#### include 动作

```
用于将一个JSP 或HTML文件 引入到另一个JSP中

先把JSP文件编译成java文件在里面嵌入另一个JSP文件，等客户端请求时再把里面嵌入的JSP文件编译为java文件（多生成引入的JSP文件和java文件）

格式：
	<jsp:include page="引入的路径" flush="true">
```

#### include指令 与 include动作的区别

```
include指令：	在JSP程序的转换时期，将被引入的JSP文件嵌入到include指令的位置，然后统一编译执行（最终生成了一个.java文件）
include动作：	在JSP程序的转换时期，被引入的文件不会嵌入到include动作的位置，而是等客户端请求时，再临时将被引入的文件 加载到响应中（最终生成的是多个.java文件）
```

#### JSP的内置对象（隐含对象）

```
内置对象指的是： JSP引擎在转换JSP文件时，帮我们在代码执行前 创建的一些 供我们使用的对象，
				内置对象具备大量的JSP中的常用功能，使用JSP内置对象可以大大的简化我们的开发流程
```

#### JSP的九大内置对象

```
request:
	类型：	HttpServletRequest
	作用：	请求对象，包含了请求相关的信息和参数
response:
	类型：	HttpServletResponse
	作用：	响应对象，包含了一些用于响应的功能
out:
	类型：	JSPWriter
	作用：	是打印流，用于向响应体中输出数据
session:
	类型：	HttpSession
	作用：	会话对象，用于状态管理以及 会话跟踪
application:
	类型：	ServletContext
	作用：	Servlet的上下文，一个应用内存中同时只有一个上下文对象。用于多个Servlet/JSP之间通信
```
```
confin:
	类型：	ServletConfig
	作用：	Servlet的配置对象，用于配置一些初始的键值对信息
pageContext:
	类型：	PageContext
	作用：	页面的上下文，每个JSP都拥有一个上下文对象，用于多段代码之间进行通信
exception:
	类型：	Throwable
	作用：	当页面的page指令中 isErrorPage属性值为true时，才会存在此对象，用于收集错误信息！
			通常此对象值为null，只有其他页面指定errorPage=当前页面时，且其他页面发生BUG后，跳转到此页面时，对象才不为null
page:
	类型：	Object
	作用：	指当前JSP页面自身，在JSP引擎生成的代码中，page对象的赋值代码为：
			Object page = this;
```
>持续更新……



